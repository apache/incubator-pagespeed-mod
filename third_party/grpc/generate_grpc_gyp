#!/bin/bash

echo Generating grpc.gyp

set -e
set -o pipefail

function gypify_file_list {
  # Sort a list of files, indents it and wrap it in quotes + a trailing comma:
  # file =>         "file",
  sort | sed -e 's/^/        "/; s/$/",/'
}

cd src/third_party/grpc

GPR_DIRS='src/src/core/lib/profiling src/src/core/lib/support'
CORE_EXCLUDE_DIRS='src/src/test/core/statistics src/src/test src/src/core/ext/census'

gpr_sources=$(find $GPR_DIRS -type f -name '*.c' | gypify_file_list)

cpp_sources=$(find 'src/src/cpp' -type f -name '*.cc' | gypify_file_list)

exclude_opts=''
for dir in $GPR_DIRS $CORE_EXCLUDE_DIRS; do
  if [ -n "$exclude_opts" ];then
    exclude_opts+=' -o'
  fi
  exclude_opts+=" -path $dir"
done

# Core is a bit more complex; We need to assemble all files in src/core that
# were not covered by gpr, with a couple of other specific exclusions.
core_sources=$(find 'src/src/core' \( $exclude_opts \) -prune -o \
    -type f -name '*.c' \
    ! -name 'zookeeper_resolver.c' ! -name 'init_unsecure.c' -print |\
  gypify_file_list)

# Now add the nanopb files, excluding the tests and whatnot in subdirs.
core_sources+=$(find 'src/third_party/nanopb' -maxdepth 1 -type f -name '*.c' |\
  gypify_file_list)

exec > grpc.gyp

cat <<EOF
# gyp file for grpc, originally based on binding.gyp from the git repo.
{
  'target_defaults': {
    'include_dirs': [
      'src',
      'src/include',
    ],
    # Clients need to inherit the grpc includes.
    'all_dependent_settings': {
      'include_dirs': [ 'src/include', ],
    },
  },
  'targets': [
    {
      'target_name': 'grpc_cpp',
      'type': 'static_library',
      'dependencies': [
        ':grpc_core',
        ':gpr',
        '<(DEPTH)/third_party/protobuf/protobuf.gyp:protobuf_lite',
      ],
      'cflags_cc': [
        '-Wall',
        '-pthread',
        '-zdefs',
        '-Wno-error=deprecated-declarations'
      ],
      'sources': [
$cpp_sources
      ],
    },
    {
      'target_name': 'grpc_core',
      'type': 'static_library',
      'dependencies': [
        ':gpr',
        '<(DEPTH)/third_party/serf/select_openssl.gyp:select_openssl',
      ],
      'cflags': [
        '-std=c99',
        '-Wall',
      ],
      'ldflags': [
        '-Wl,-wrap,memcpy',
      ],
      'sources': [
$core_sources
      ],
    },
    {
      'target_name': 'gpr',
      'type': 'static_library',
      'cflags': [
        '-std=c99',
        '-Wall',
      ],
      'sources': [
$gpr_sources
      ],
    },
    {
      'target_name': 'grpc_cpp_plugin',
      'type': 'executable',
      'toolsets': [ 'host' ],
      'cflags_cc': [
        '-Wall',
        '-pthread',
        '-zdefs',
        '-Wno-error=deprecated-declarations'
      ],
      'sources': [
        'src/src/compiler/cpp_generator.cc',
        'src/src/compiler/cpp_plugin.cc',
      ],
      'dependencies': [
        '<(DEPTH)/third_party/protobuf/protobuf.gyp:protoc_lib',
      ],
    },
  ]
}
EOF
